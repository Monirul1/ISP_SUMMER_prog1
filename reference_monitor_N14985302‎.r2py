"""
NAME: MD Monirul Islam
Date: 7/5/2020
Course: ISP Summer 2020
Assignment: Part I of Reference Monitor

This security layer inadequately handles A/B storage for files in RepyV2.

""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   

    # local (per object) reference to the underlying file
    mycontext['file_lock'] = createlock()
    mycontext['file_lock'].acquire(True)
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      
      if self.Afn in listfiles() and self.Bfn in listfiles():
        self.Afile = openfile(self.Afn,False)
        self.Bfile = openfile(self.Bfn,False)

      else:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE',0)
        self.Bfile.writeat('SE',0)

    else:
      self.Bfile = openfile(self.Bfn, True)			
      self.Afile = openfile(self.Afn, False)		
      
    mycontext['Lock']= createlock()

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    mycontext['Lock'].acquire(True)				
    try:											            
      self.Bfile.writeat(data,offset)
      mycontext['Lock'].release()				
    except:					
      pass

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    mycontext['Lock'].acquire(True)
    try:
      mycontext['Lock'].release()   
      return self.Afile.readat(bytes,offset)
    except:
      mycontext['Lock'].release()        
      pass

  def close(self):
    mycontext['Lock'].acquire(True)
    b_data = self.Bfile.readat(None,0)
    check_validity = self.isValid(b_data)
    mycontext['Lock'].release()

    try:
      if check_validity:
          self.Afile.writeat(b_data,0)
      #discard B file
      self.Bfile.close()
      removefile(self.Bfn)
      self.Afile = openfile(self.Afn, True)		
      self.Afile.writeat(content, 0)			

    except:
      pass

    if self.isValid(self.Afile.readat(None,0)):
      self.Afile.close()

  def isValid(self,b):
    char_start = 'S'
    char_end = 'E'
    if b.startswith(char_start) and b.endswith(char_end):
      return True;
    else:
      return False;
    return 0;    
  						
def ABopenfile(filename, create):
  filename = filename.lower()
  file_list = list(filename)
  filename = '' 
  for i in file_list: 
    if(i>='a' and i <='z') or (i>='0' and i <= '9') or (i == '.'):
      filename = filename+i
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()